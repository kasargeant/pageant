/**
 * @file Pageant.js
 * @description The Pageant class.
 * @author Kyle Alexis Sargeant <kasargeant@gmail.com> {@link https://github.com/kasargeant https://github.com/kasargeant}.
 * @copyright Kyle Alexis Sargeant 2017
 * @license See LICENSE file included in this distribution.
 */

// Imports
const colors = require("colors");


/**
 * @class
 * @classdesc A class of pretty-print console functions.
 * @static
 */
class Pageant {
    constructor() {
        this.indentCount = 0;
    }

    cmd(value) {
        value = " " + value.bgMagenta;
        console.log(value);
    }
    task(value) {
        value = "  " + value.bgBlue;
        console.log(value);
    }
    action(value) {
        value = "  - " + value.bgBlue;
        console.log(value);
    }
    stage(value) {
        value = "    -> " + value.cyan;
        console.log(value);
    }

    warning(value) {
        value = "  " + value.yellow;
        console.log(value);
    }
    error(value) {
        value = "  " + value.red;
        console.log(value);
    }

    info(value) {
        console.log(this._stringifyValue(value));
    }

    stringify(value) {
        // console.log(JSON.stringify(value, null, "\t")); // stringify with 2 spaces at each level
        console.log(JSON.stringify(value, null, 2)); // stringify with 2 spaces at each level
    }

    indent() {
        return "  ".repeat(this.indentCount);
    }

    _stringifyFunction(obj, prop) {
        let placeholder = "____PLACEHOLDER____";
        let fns = [];
        let json = JSON.stringify(obj, function(key, value) {
            if(typeof value === "function") {
                fns.push(value);
                return placeholder;
            }
            return value;
        }, 2);
        json = json.replace(new RegExp(`"${placeholder}"`, "g"), function(_) {
            return fns.shift();
        });
        return json;
    };

    _stringifyArray(values) {
        let representation = "[\n";
        this.indentCount++;
        if(values.length > 0) {
            values.map(function(value) {
                representation += this.indent() + `${this._stringifyValue(value)},\n`;
            }.bind(this));
            representation = representation.slice(0, -2); // Remove the trailing comma+space
        }
        this.indentCount--;
        representation += "\n" + this.indent() + "]";
        return representation;
    }

    _stringifyObject(obj) {

        let keys = Object.keys(obj);
        if(keys.length === 0) {return "{}";}

        let representation = "{\n";
        this.indentCount++;

        keys.map(function(key) {
            let value = obj[key];
            // representation += this.indent() + `"${key.blue}": ${this._stringifyValue(value)},\n`;
            representation += this.indent() + `"${key}"`.blue + `: ${this._stringifyValue(value)},\n`;
        }.bind(this));
        representation = representation.slice(0, -2); // Remove the trailing comma+space

        this.indentCount--;
        representation += "\n" + this.indent() + "}";

        return representation;
    }

    _stringifyValue(value) {
        let type = typeof(value);
        switch(type) {
            case "undefined":
                return "";

            case "object":
                if(value.constructor === Array) {
                    return this._stringifyArray(value);
                } else {
                    return this._stringifyObject(value);
                }
            case "function":
                return this._stringifyFunction(value, "Pageant");

            case "boolean":
                return ("" + value).yellow;

            case "number":
                return ("" + value).cyan;

            case "string":
                return `"${value}"`.green;

            case "symbol":
                return ("$" + value).magenta;

            default:
                console.log("UNHANDLED TYPE: " + type);
                return;
        }
    }
}

// Exports
module.exports = Pageant;

// let log = new Pageant();
//
// log.info({
//
//     language: ["es51", "es2015", "es2015+JSX"],
//
//     bundle: {
//         transpile: true
//     },
//     clean: {},
//     document: {
//         src: "./src",
//         dst: "./docs/api"
//     },
//     init: {
//         name: "Untitled",
//         version: "0.0.0",
//         description: "A new project generated by the Warhorse task runner.",
//         keywords: ["javascript"],
//         author: "undefined",
//         email: "undefined@undefined.com",
//         license: "GPL-3.0"
//     },
//     lint: {
//         js: {
//             style: [1, 2, 3],
//             syntax: "something"
//         }
//     },
//     load: {
//         encoding: "utf8"
//     },
//     minify: {},
//     pack: {
//         gif: {},
//         jpg: {},
//         png: {},
//         svg: {}
//     },
//     precompile: {
//         includePaths: ["./src/sass"]
//     },
//     rename: {},
//     save: {
//         compress: false,
//         encoding: "utf8"
//     },
//     somefun: function(value) {return value * value;},
//     test: {a: 12, somethingelse: 11}
// });
//
